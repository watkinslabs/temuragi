TemplateFragment:
    meta:
      tablename: template_fragments
      schema: public
    data:
      template_uuid: 00000000-0000-0000-0000-000000000002
      fragment_type: base
      fragment_name: Admin Base Layout
      fragment_key: base
      template_file_path: admin/fragments/base_layout.html
      compiled_file_path: compiled/admin/fragments/base_layout.html
      content_type: text/html
      version_number: 1
      version_label: v1.0.0
      is_active: true
      template_source: |
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>...</title>
            <meta name="csrf-token" content="{{ csrf_token() }}">

            <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
            <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
            <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.3/themes/blitzer/jquery-ui.css">
            <link rel="stylesheet" href="https://cdn.datatables.net/2.3.2/css/dataTables.bootstrap5.min.css">
            <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
            <script src="https://code.jquery.com/ui/1.14.1/jquery-ui.min.js" integrity="sha256-AlTido85uXPlSyyaZNsjJXeCs07eSv3r43kyCVc8ChI=" crossorigin="anonymous"></script>
            <script src="https://cdn.datatables.net/2.3.2/js/dataTables.min.js"></script>


            <script src="/static/app.js"></script>

            <script src="https://unpkg.com/htmx.org@1.9.10"></script>
            <script src="https://unpkg.com/htmx.org/dist/ext/head-support.js"></script>

            <style>
                {{ theme_css()|safe }}
                
                /* Auth loading styles */
                .auth-loading {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(255, 255, 255, 0.95);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 9999;
                }
                
                .auth-loading.hidden {
                    display: none;
                }
                
                /* HTMX loading indicator */
                .htmx-loading::before {
                    content: "";
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 3px;
                    background: linear-gradient(90deg, #007bff 0%, #0056b3 50%, #007bff 100%);
                    animation: loading-bar 1s linear infinite;
                    z-index: 9998;
                }
                
                @keyframes loading-bar {
                    0% { transform: translateX(-100%); }
                    100% { transform: translateX(100%); }
                }
            </style>
        </head>
        <body>
            <div class="auth-loading" id="auth-loading">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Checking authentication...</span>
                    </div>
                    <p class="mt-2">Checking authentication...</p>
                </div>
            </div>

            <div id="app-content" style="display: none;">
                {% include "header" %}

                <div class="breadcrumbs">
                    {% include "breadcrumb" %}
                </div>

                <div class="content_area">
                    <div class="sidebar_container">
                        {% include "sidebar" %}
                    </div>
                    
                    <div class="main_content" id="main-content">
                        {% block content %}
                            No Content Yet
                        {% endblock %}
                    </div>
                </div>
                
                <footer class="footer">
                    {% include "footer" %}
                </footer>
            </div>

            <script>
                const csrf_token = document.querySelector('meta[name="csrf-token"]').content;

                class AppInitializer {
                    constructor() {
                        this.token_manager = null;
                        this.auth_manager = null;
                        this.connection_monitor = null;
                        this.health_check_interval = window.health_check_interval || 10000;
                    }
                    
                    async init() {
                        // Create instances
                        this.token_manager = new TokenManager();
                        
                        this.auth_manager = new AuthManager(this.token_manager, {
                            login_url: '{{ url_for("auth.login") }}',
                            validate_url: '{{ url_for("api_auth.validate") }}',
                            refresh_url: '{{ url_for("api_auth.refresh") }}',
                            logout_url: '{{ url_for("api_auth.logout") }}',
                            status_url: '{{ url_for("api_auth.status") }}'
                        });
                        
                        this.connection_monitor = new ConnectionMonitor({
                            health_endpoint: '{{ url_for("api_auth.health") }}',
                            check_interval: this.health_check_interval,
                            max_consecutive_failures: 1

                        });
                        
                        // Set cross-references
                        this.connection_monitor.set_token_manager(this.token_manager);
                        this.connection_monitor.set_auth_manager(this.auth_manager);
                        this.auth_manager.set_connection_monitor(this.connection_monitor);
                        
                        // Expose globally for backwards compatibility
                        window.token_manager = this.token_manager;
                        window.auth_manager = this.auth_manager;
                        window.connection_monitor = this.connection_monitor;
                        
                        // Global functions
                        window.logout = () => this.auth_manager.logout();
                        window.check_auth_status = () => this.auth_manager.check_status();
                        
                        // Check if we're on login page
                        const is_login_page = window.location.pathname === '{{ url_for("auth.login") }}';
                        
                        if (!is_login_page) {
                            // Initialize authentication
                            const auth_success = await this.auth_manager.init();
                            
                            // Hide loading screen
                            document.getElementById('auth-loading').classList.add('hidden');
                            
                            if (auth_success) {
                                // Show app content
                                document.getElementById('app-content').style.display = 'block';
                            }
                            // If auth fails, init() will redirect to login
                        } else {
                            // On login page - just hide loader and show content
                            document.getElementById('auth-loading').classList.add('hidden');
                            document.getElementById('app-content').style.display = 'block';
                        }
                        
                        // Set up HTMX loading indicators
                        this.setup_htmx_indicators();
                        
                        // Set up visibility change handler
                        this.setup_visibility_handler();
                    }
                    
                    setup_htmx_indicators() {
                        document.body.addEventListener('htmx:beforeRequest', function(evt) {
                            document.body.classList.add('htmx-loading');
                        });
                        
                        document.body.addEventListener('htmx:afterRequest', function(evt) {
                            document.body.classList.remove('htmx-loading');
                        });
                        
                        // Update active nav items after HTMX swaps
                        document.body.addEventListener('htmx:afterSwap', function(evt) {
                            document.querySelectorAll('.nav_item[aria-current="page"]').forEach(el => {
                                el.removeAttribute('aria-current');
                            });
                            
                            const currentPath = window.location.pathname;
                            document.querySelectorAll('.nav_item[href="' + currentPath + '"]').forEach(el => {
                                el.setAttribute('aria-current', 'page');
                            });
                        });
                    }
                    
                    setup_visibility_handler() {
                        document.addEventListener('visibilitychange', async () => {
                            if (!document.hidden && this.auth_manager.validation_interval) {
                                console.log('Tab became active - validating tokens');
                                const is_valid = await this.auth_manager.validate_tokens();
                                if (!is_valid) {
                                    this.auth_manager.redirect_to_login();
                                }
                            }
                        });
                    }
                }

                // Initialize when DOM is ready
                document.addEventListener('DOMContentLoaded', async () => {
                    const app = new AppInitializer();
                    await app.init();
                });
            </script>
        </body>
        </html>
      template_hash: null
      variables_schema: |
        {
          "type": "object",
          "properties": {
            "page_title": {"type": "string"},
            "current_user": {"type": "object"},
            "app_name": {"type": "string"}
          }
        }
      sample_data: |
        {
          "page_title": "Admin Dashboard",
          "current_user": {"name": "Admin User"},
          "app_name": "System Admin"
        }
      required_context: |
        ["current_user", "app_name"]
      dependencies: |
        ["header", "sidebar", "content", "footer"]
      css_dependencies: |
        ["/static/css/bootstrap.min.css", "/static/css/admin.css"]
      js_dependencies: |
        ["/static/js/bootstrap.bundle.min.js", "/static/js/admin.js"]
      description: Base layout container for admin interface using OpenShift PatternFly design
      usage_notes: Root container with CSS Grid layout for admin pages
      preview_template: admin/previews/base_layout.html
      sort_order: 1
      is_partial: false
      cache_strategy: static
      cache_duration: 3600
      last_compiled: null
      change_description: Initial admin base layout fragment
      created_by_user_uuid: null

